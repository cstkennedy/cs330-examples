buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "java"
    id "application"
    id "jvm-test-suite"
    id "eclipse"

    id "checkstyle"
    id "com.github.spotbugs" version "6.2.1"
    id "project-report"
    id "jacoco"
    id "jacoco-report-aggregation"
    id "org.barfuin.gradle.jacocolog" version "3.1.0"
    id "pmd"

    id "org.jbake.site" version "5.5.0"
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()
}

dependencies {
    // Everything in src/main (production code).
    // implementation ...

    // Everything in src/test (test code)
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
    testImplementation "org.hamcrest:hamcrest-library:2.2"
}

jar {
    archiveBaseName = "RunShapes"

    manifest {
        attributes(
            "Main-Class": "edu.odu.cs.cs330.examples.RunShapes"
        )
    }
}

run {
    mainClass = "edu.odu.cs.cs330.examples.RunShapes"
    args = ["src/main/resources/inputShapes.txt", "2"]
}

application {
    mainClass = "edu.odu.cs.cs330.examples.RunShapes"
}

// https://docs.gradle.org/current/userguide/jvm_test_suite_plugin.html#jvm_test_suite_plugin
testing {
    suites {
        configureEach {
            useJUnitJupiter()
        }

        test {
            // configureEach replaced explicit "test" target config
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation("org.junit.jupiter:junit-jupiter:5.8.2")
                implementation("org.hamcrest:hamcrest-library:2.2")
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

test {
    ignoreFailures = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    finalizedBy jacocoTestReport
}

integrationTest {
    dependsOn test

    ignoreFailures = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    finalizedBy integrationTestCodeCoverageReport
}

//
// Todo: Add Notes
//

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

//------------------------------------------------------------------------------
// Documentation Tool(s)
//------------------------------------------------------------------------------
javadoc {
    failOnError = false
}

//------------------------------------------------------------------------------
// Analysis Tool(s)
//------------------------------------------------------------------------------
jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }
}

/*
 * This task is based on HenrikBaerbak's example at
 * <https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/10>
 */
task mergedJacocoReportHTML(
    type: JacocoReport,
    dependsOn: [
        "test",
        "integrationTest",
        "jacocoTestReport",
        "testCodeCoverageReport",
        "integrationTestCodeCoverageReport"
    ]
)
{
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)

    executionData.from = fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.required = false
        csv.required = false
    }
}

// SpotBugs
spotbugs {
    toolVersion = "4.9.3"
}

spotbugsMain {
    ignoreFailures = true
    effort = com.github.spotbugs.snom.Effort.MAX
    reportLevel = com.github.spotbugs.snom.Confidence.values()[1] // Medium
    reports {
       xml.required = false
       html.required = true
    }
}

spotbugsTest.enabled = false
spotbugsIntegrationTest.enabled = false
// End SpotBugs config

pmd {
    toolVersion = "7.0.0"

    ignoreFailures = true
    ruleSets = [
        "category/java/bestpractices.xml",
        "category/java/codestyle.xml",
        "category/java/design.xml",
        "category/java/errorprone.xml",
        "category/java/performance.xml"
    ]
}

// Check Style Config
checkstyle {
    toolVersion = "10.12.4"
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.outputLocation = project.file("build/reports/checkstyle/main.html")
    }
}
checkstyleTest.enabled = false
checkstyleIntegrationTest.enabled = false
// End Checkstyle config

//------------------------------------------------------------------------------
// JBake Configuration
//------------------------------------------------------------------------------
task reports(
    dependsOn: [
        "javadoc",
        "check",
        "test",
        "integrationTest",
        "jacocoTestReport",
        "testCodeCoverageReport",
        "integrationTestCodeCoverageReport",
        "projectReport"
    ]
)
{
    description "Generate all reports and documentation for this project"
}

task copyJDocs (type: Copy) {
    from "build/docs"
    into "build/tmp/website/assets"
    dependsOn "javadoc"
}

/*
task copyTestReports (type: Copy) {
    from "build/reports/tests"
    into "build/tmp/website/assets/tests"
    dependsOn "test"
    dependsOn "integrationTest"
}
*/

task copyReports (type: Copy) {
    from "build/reports"
    into "build/tmp/website/assets"
    dependsOn "reports"
}

task copyJbakeTemplates (type: Copy) {
    from "src/jbake"
    into "build/tmp/website"
}

// Combine home0.md and the project README.md into a single homepage
task buildHomePage (dependsOn: copyJbakeTemplates) {
    inputs.files ( "build/tmp/website/content/home0.md", "../README.md")
    outputs.file ("build/tmp/website/content/home.md")
    doLast  {
        outputs.files.singleFile.withOutputStream { out ->
            for (file in inputs.files) file.withInputStream {
                out << it << '\n'
            }
        }
    }
}
jbake {
     srcDirName = "build/tmp/website"
}

// Ensure all Copy and JBake build tasks run
task setupWebsite(
    dependsOn: [
        "buildHomePage",
        "copyJDocs",
        "copyReports"
    ]
)
{
}

bake.dependsOn "setupWebsite"
